<#
// Copyright © Simon Hughes 2012
#>
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity;
using System.Data.Entity.ModelConfiguration;
using System.Linq;

namespace <#= Namespace #>
{
    // ************************************************************************
    // Database context
    public <# if(MakeClassesPartial) { #>partial <# } #>class <#=DbContextName#> : DbContext
    {
<#
foreach(Table tbl in from t in tables.OrderBy(x => x.NameHumanCase) select t)
{
#>
        public IDbSet<<#=tbl.NameHumanCase#>> <#=tbl.NameHumanCase#> { get; set; } // <#=tbl.Name#>
<# } #>

        static <#=DbContextName#>()
        {
            Database.SetInitializer<<#=DbContextName#>>(null);
        }

        public <#=DbContextName#>()
            : base("Name=<#=ConnectionStringName#>")
        {
        }

        public <#=DbContextName#>(string connectionString) : base(connectionString)
        {
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

<#
foreach(Table tbl in from t in tables.OrderBy(x => x.NameHumanCase) select t)
{
#>
            modelBuilder.Configurations.Add(new <#=tbl.NameHumanCase#>Configuration());
<# } #>
        }
    }

    // ************************************************************************
    // POCO classes

<#
foreach(Table tbl in from t in tables.OrderBy(x => x.NameHumanCase) select t)
{
#>
    // <#=tbl.Name#>
    public <# if(MakeClassesPartial) { #>partial <# } #>class <#=tbl.NameHumanCase#>   
    {
		public static int Count()
        {
            return MyDbContext.db.<#=tbl.NameHumanCase#>.Count();
        }
		public static <#=tbl.NameHumanCase#> GetById(int id)
        {
            return MyDbContext.db.<#=tbl.NameHumanCase#>.FirstOrDefault(x => x.<#=tbl.Name#>Id == id);
        }
		public static bool Delete(int id)
        { 
            try
            {
                MyDbContext.db.<#=tbl.NameHumanCase#>.Remove(GetById(id));

                MyDbContext.db.SaveChanges();

                return true;
            }
            catch (Exception ex)
            {
                Bussiness.BaseClass.log(ex);
                return false;
            }
        }
		public static int AddOrUpdate(<#=tbl.NameHumanCase#> item)
        {
            var newItem = GetById(item.<#=tbl.Name#>Id) ?? new <#=tbl.NameHumanCase#>();

<#
foreach(Column col in tbl.Columns.OrderBy(x => x.Ordinal))
{
#>
			newItem.<#=col.Name #> = item.<#=col.Name #>;
<# } #>
            try
            {
                if (newItem.<#=tbl.Name#>Id == 0) MyDbContext.db.<#=tbl.NameHumanCase#>.Add(newItem);

                MyDbContext.db.SaveChanges();

                return newItem.<#=tbl.Name#>Id;
            }
            catch (Exception ex)
            {
                Bussiness.BaseClass.log(ex);
                return -1;
            }
        }
        public static List<<#=tbl.NameHumanCase#>> Search(<#=tbl.NameHumanCase#> search)
        {
            var result = from x in MyDbContext.db.<#=tbl.NameHumanCase#>
                         where 
<#foreach(Column col in tbl.Columns.OrderBy(x => x.Ordinal))
{#>
						 (search.<#=col.Name #> == <#if(col.Default != string.Empty){#><#= col.Default #><#}else{	if(!col.IsNullable && (col.PropertyType == "long" || col.PropertyType == "short" || col.PropertyType == "int" || col.PropertyType == "double" || col.PropertyType == "float" || col.PropertyType == "decimal")){#>0<#	}else{#>null<#	}}#> || 
						 <#if(col.PropertyType == "string"){#>x.<#=col.Name #>.Contains(search.<#=col.Name #>))<#	}else{#>x.<#=col.Name #> == search.<#=col.Name #>)<#	}#> &&
<#}#>true
                         select x; 
            return result.ToList();
        }

<#
foreach(Column col in tbl.Columns.OrderBy(x => x.Ordinal))
{
#>
        <#=col.Entity #>
<# } #>
<#
if(tbl.ReverseNavigationProperty.Count() > 0)
{
#>

        // Reverse navigation
<#
foreach(string s in tbl.ReverseNavigationProperty)
{
#>
        <#=s #>;
<# } } #>
<# if(tbl.HasForeignKey) { #>

        // Foreign keys
<#
foreach(Column col in from c in tbl.Columns.OrderBy(x => x.Ordinal) where c.EntityFk != null select c)
{
#>
        <#=col.EntityFk #>
<# } } #>
<# 
if(tbl.Columns.Where(c => c.Default != string.Empty).Count() > 0 || tbl.ReverseNavigationCtor.Count() > 0) 
{ 
#>

        public <#=tbl.NameHumanCase#>()
        {
<#
foreach(Column col in tbl.Columns.OrderBy(x => x.Ordinal).Where(c => c.Default != string.Empty))
{
#>
            <#=col.PropertyNameHumanCase #> = <#=col.Default #>;
<# } #>
<#
foreach(string s in tbl.ReverseNavigationCtor)
{
#>
            <#=s #>
<# } #>
        }
<# } #>
    }

<# } #>

    // ************************************************************************
    // POCO Configuration

<#
foreach(Table tbl in tables.OrderBy(x => x.NameHumanCase))
{
#>
    // <#=tbl.Name#>
    public <# if(MakeClassesPartial) { #>partial <# } #>class <#=tbl.NameHumanCase#>Configuration : EntityTypeConfiguration<<#=tbl.NameHumanCase#>>
    {
        public <#=tbl.NameHumanCase#>Configuration()
        {
            ToTable("<#=tbl.Schema#>.<#=tbl.Name#>");
            HasKey(<#=tbl.PrimaryKeyNameHumanCase()#>);

<#
foreach(Column col in tbl.Columns.OrderBy(x => x.Ordinal))
{
#>
            <#=col.Config #>
<# } #>
<#
if(tbl.ReverseNavigationConfiguration.Count() > 0)
{
#>

            // Reverse navigation
<#
foreach(string s in tbl.ReverseNavigationConfiguration)
{
#>
            <#=s #>;
<# } } #>
<# if(tbl.HasForeignKey) { #>

            // Foreign keys
<#
foreach(Column col in from c in tbl.Columns.OrderBy(x => x.Ordinal) where c.ConfigFk != null select c)
{
#>
            <#=col.ConfigFk #>
<# } } #>
        }
    }

<# } #>
}
